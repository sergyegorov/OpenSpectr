/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tl.util.debug;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JPanel;
import org.tl.math.Function;
import org.tl.ops.Common;

/**
 *
 * @author root
 */
public class FunctionView extends javax.swing.JPanel {

    /**
     * Creates new form FunctionView
     */
    public FunctionView() {
        initComponents();
        add(new DrawPanel(),BorderLayout.CENTER);
    }

    double[] xValues,yValues;
    double minX,maxX,minY,maxY;
    Function fk;
    boolean[] en;
    public void init(Function fk,boolean[] en,double[] x,double[] y){
        this.xValues = x;
        this.yValues = y;
        this.en = en;
        this.fk = fk;
        
        minX = x[0];
        maxX = x[0];
        minY = y[0];
        maxY = y[0];
        
        for(double val : x){
            if(val < minX)
                minX = val;
            if(val > maxX)
                maxX = val;
        }
        double dlt = (maxX - minX)/10;
        maxX += dlt;
        minX -= dlt;
        
        for(double val : y){
            if(val < minY)
                minY = val;
            if(val > maxY)
                maxY = val;
        }
        dlt = (maxY - minY)/10;
        maxY += dlt;
        minY -= dlt;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    public class DrawPanel extends JPanel{
        public DrawPanel(){
            super();
            setPreferredSize(new Dimension(640,400));
        }
        
        @Override
        public void paint(Graphics gr){
            try{
                int w = getWidth();
                int h = getHeight();
                gr.setColor(Color.white);
                gr.fillRect(0, 0, w, h);
                
                if(w == 0 || h == 0)
                    return;
                
                double kx = w / (double)(maxX - minX);
                double ky = h / (maxY - minY);
                gr.setColor(Color.black);
                //int y0 = h - (int)(ky * (0 - minY)) + 5;
                //gr.drawString(""+maxData, 10, 20);
                //gr.drawString(""+minData, 10, 40);
                gr.drawLine(0, h, h, h);
                gr.setColor(Color.blue);
                int px = -10000;
                int py = h/2;
                double step = (maxX - minX)/20;
                for(double xv = minX;xv < maxX;xv += step){
                    int x = (int)(kx * (xv - minX));
                    int y = h - (int)(ky * (fk.calcDirect(xv) - minY));
                    gr.drawLine(px, py, x, y);
                    px = x;
                    py = y;
                }
                int size = 4;
                for(int i = 0;i<xValues.length;i++){
                    int x = (int)(kx * (xValues[i] - minX));
                    int y = h - (int)(ky * (yValues[i] - minY));
                    if(en[i]){
                        gr.drawLine(x-size, y-size, x+size, y+size);
                        gr.drawLine(x-size, y+size, x+size, y-size);
                    } else {
                        gr.drawOval(x-size, y-size, size*2+1, size*2+1);
                    }
                }
            } catch(Exception ex){
                Common.Log.exception("Draw debug data exception", ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
