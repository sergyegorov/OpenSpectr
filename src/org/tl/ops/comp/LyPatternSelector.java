/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tl.ops.comp;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.tl.math.LyLinker;
import org.tl.ops.Common;
import org.tl.ops.db.LineLibRecord;
import org.tl.ops.dev.data.SpectralMask;
import org.tl.ops.dev.data.SpectralMeasuring;
import org.tl.ops.dev.data.SpectralPreview;
import org.tl.ops.dev.data.SpectralPreviewCursorEvent;
import org.tl.ops.dev.data.SpectralRawData;
import org.tl.ops.dev.data.SpectralRawDataPreViewPanel;
import org.tl.ops.dev.data.SpectralRawDispers;
import org.tl.util.DlgPanelOk;
import org.tl.util.ServDlg;

/**
 *
 * @author root
 */
public class LyPatternSelector extends javax.swing.JDialog 
    implements SpectralPreviewCursorEvent{

    File getFile(String name){
        if(name == null)
            return new File(Common.DBDir+"Linking"+File.separator);
        return new File(Common.DBDir+"Linking"+File.separator+name);
    }
    /**
     * Creates new form LyPatternSelector
     */
    public LyPatternSelector(java.awt.Frame parent, boolean modal) throws IOException {
        super(parent, modal);
        initComponents();
        File baseFolder = getFile(null);
        if(baseFolder.exists() == false && baseFolder.mkdir() == false)
            throw new IOException("Can't create base folder "+baseFolder.getAbsolutePath());
        spList = new SpectrList(getFile(null));
        spList.showInList(lSpectrList);
        
        spectralRawDataPreViewPanel1.setCursorEvent(this);
        
        linkList = new LinkList(baseFolder);
        linkList.showInList(lLinks);
        
        updateList();
        
        setSize(new Dimension(1024,600));
    }
    
    
    SpectrList spList;
    LinkList linkList;
    @Override
    public void changed(SpectralRawDataPreViewPanel viewer) {
        
    }
    
    final static String MASK_EXT = ".link";
    public class LinkList extends org.tl.ops.db.FileList{
        public LinkList(File folder){
            super(folder);
        }

        @Override
        public boolean extraFileFilter(File file) {
            return file.getName().endsWith(MASK_EXT);
        }
    }
    
    public class SpectrList extends org.tl.ops.db.FolderList{
        public SpectrList(File folder){
            super(folder);
        }

        @Override
        public boolean extraFileFilter(File file) {
            return true;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lSpectrList = new javax.swing.JList();
        jPanel2 = new javax.swing.JPanel();
        spectralRawDataPreViewPanel1 = new org.tl.ops.dev.data.SpectralRawDataPreViewPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lLinks = new javax.swing.JList();
        jPanel4 = new javax.swing.JPanel();
        lbPixel = new javax.swing.JLabel();
        spLy = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        btnSetPixel = new javax.swing.JButton();
        btnSetLy = new javax.swing.JButton();
        btnViewMask = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnSetNextPixel = new javax.swing.JButton();
        chbEnabled = new javax.swing.JCheckBox();
        btnNew = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mSpMeasuring = new javax.swing.JMenuItem();
        mSpDelete = new javax.swing.JMenuItem();
        mSpRename = new javax.swing.JMenuItem();
        mLink = new javax.swing.JMenu();
        mLinkApplyCur = new javax.swing.JMenuItem();
        mLinkApplyDef = new javax.swing.JMenuItem();
        mLinkUseSpectrAsLink = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Base  matrixes");

        lSpectrList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lSpectrList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lSpectrListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lSpectrList);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 326, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setText("Links list");

        lLinks.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lLinks.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lLinksValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lLinks);

        lbPixel.setText("Pixel");

        spLy.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), null, null, Float.valueOf(1.0f)));
        spLy.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spLyStateChanged(evt);
            }
        });

        jLabel4.setText("Ly");

        btnSetPixel.setText("Set");
        btnSetPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetPixelActionPerformed(evt);
            }
        });

        btnSetLy.setText("Set");
        btnSetLy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetLyActionPerformed(evt);
            }
        });

        btnViewMask.setText("View Mask");
        btnViewMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewMaskActionPerformed(evt);
            }
        });

        btnRemove.setText("Delete");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnSetNextPixel.setText("Set Next");
        btnSetNextPixel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetNextPixelActionPerformed(evt);
            }
        });

        chbEnabled.setText("Active");
        chbEnabled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chbEnabledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnViewMask, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spLy, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetLy, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnSetPixel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSetNextPixel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(lbPixel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chbEnabled)
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPixel)
                    .addComponent(chbEnabled))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSetPixel)
                    .addComponent(btnSetNextPixel))
                .addGap(15, 15, 15)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spLy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(btnSetLy))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnViewMask)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRemove))
        );

        btnNew.setText("New");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnUpdate.setText("Save");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNew)
                    .addComponent(btnUpdate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(spectralRawDataPreViewPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spectralRawDataPreViewPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jSplitPane1.setRightComponent(jPanel2);

        jMenu1.setText("Spectrs");

        mSpMeasuring.setText("Measure");
        mSpMeasuring.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSpMeasuringActionPerformed(evt);
            }
        });
        jMenu1.add(mSpMeasuring);

        mSpDelete.setText("Delete");
        mSpDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSpDeleteActionPerformed(evt);
            }
        });
        jMenu1.add(mSpDelete);

        mSpRename.setText("Rename");
        jMenu1.add(mSpRename);

        jMenuBar1.add(jMenu1);

        mLink.setText("Linking");

        mLinkApplyCur.setText("Apply current links");
        mLinkApplyCur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLinkApplyCurActionPerformed(evt);
            }
        });
        mLink.add(mLinkApplyCur);

        mLinkApplyDef.setText("Apply default links");
        mLinkApplyDef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLinkApplyDefActionPerformed(evt);
            }
        });
        mLink.add(mLinkApplyDef);

        mLinkUseSpectrAsLink.setText("Use spectr for linking");
        mLinkUseSpectrAsLink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mLinkUseSpectrAsLinkActionPerformed(evt);
            }
        });
        mLink.add(mLinkUseSpectrAsLink);

        jMenuBar1.add(mLink);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mSpMeasuringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSpMeasuringActionPerformed
        try{
            File baseDir = getFile(null);
            String name = ServDlg.getNewFileName(this, 
                    Common.Mls.get("Enter new base name"), 
                    Common.Mls.get("New base"), 
                    baseDir);
            if(name == null)
                return;
            String folderPath = baseDir.getAbsolutePath()+File.separator+name;
            File folder = new File(folderPath);
            SpectralRawData data = Common.Setup.getDevice().measuring(this);
            if(data == null)
                return;
            SpectralMeasuring spm = new SpectralMeasuring(folder.getAbsolutePath());
            spm.setData(data);
            spList.update();
        }catch(Exception ex){
            Common.Log.exception("Measuring exception...", ex);
        }
    }//GEN-LAST:event_mSpMeasuringActionPerformed

    private void lSpectrListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lSpectrListValueChanged
        try{
            if(lSpectrList.getSelectedIndex() < 0){
                spectralRawDataPreViewPanel1.showSpectr(0, null);
                return;
            }
            File fl = getFile((String)lSpectrList.getSelectedValue());
            SpectralMeasuring spm = new SpectralMeasuring(fl.getAbsolutePath());
            SpectralPreview preview = spm.getPreview();
            spectralRawDataPreViewPanel1.showSpectr(0, preview);
        }catch(Exception ex){
            Common.Log.exception("Spectr selection exception...", ex);
        }
    }//GEN-LAST:event_lSpectrListValueChanged

    private void lLinksValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lLinksValueChanged
        try{
            if(Modefied && Mask != null){
                int option = JOptionPane.showConfirmDialog(rootPane, 
                        Common.Mls.get("Save changes?"), 
                        Common.Mls.get("Data modefied"), 
                        JOptionPane.YES_NO_OPTION, 
                        JOptionPane.QUESTION_MESSAGE);
                if(option == JOptionPane.YES_OPTION){
                    Mask.store((float)spLy.getValue());
                    Modefied = false;
                }
            }
            if(lLinks.getSelectedIndex() < 0){
                Mask = null;
                Modefied = false;
                updateValues();
                return;
            }
            Modefied = false;
            Mask = new SpectralMask(getFile(null));
            Mask.restore(getFile((String)lLinks.getSelectedValue()));
            updateValues();
        }catch(Exception ex){
            Common.Log.exception("Link selection error...", ex);
        }
    }//GEN-LAST:event_lLinksValueChanged

    boolean Modefied;
    SpectralMask Mask;
    
    void updateValues(){
        if(Mask != null){
            lbPixel.setText(Common.Mls.get("Pixel")+" "+Mask.Pixel);
            spLy.setValue(Mask.getLy());
            chbEnabled.setSelected(Mask.Enabled);
            spectralRawDataPreViewPanel1.setMarkSelectedLy(Mask.getLy());
        } else {
            lbPixel.setText(Common.Mls.get("Pixel")+" -");
            spLy.setValue(0F);
            chbEnabled.setSelected(false);
            spectralRawDataPreViewPanel1.setMarkSelectedLy(-1);
        }
        spectralRawDataPreViewPanel1.updateView();
    }
    
    private void btnSetPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetPixelActionPerformed
        try{
            if(spectralRawDataPreViewPanel1.CursorLy < 0){
                return;
            }
            
            SpectralMask mask = spectralRawDataPreViewPanel1.getMask(getFile(null), 
                    (String)lSpectrList.getSelectedValue(), 
                    (float)spectralRawDataPreViewPanel1.CursorLy, 0);
            if(Mask != null)
                mask.setLy(Mask.getLy());
            Mask = mask;
            updateValues();
            Modefied = true;
            btnViewMaskActionPerformed(evt);
        }catch(Exception ex){
            Common.Log.exception("Link selection error...", ex);
        }
    }//GEN-LAST:event_btnSetPixelActionPerformed

    private void btnSetNextPixelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetNextPixelActionPerformed
        try{
            if(spectralRawDataPreViewPanel1.CursorLy < 0){
                return;
            }
            Mask = spectralRawDataPreViewPanel1.getMask(getFile(null), 
                    (String)lSpectrList.getSelectedValue(), 
                    (float)spectralRawDataPreViewPanel1.CursorLy, 1);
            updateValues();
            Modefied = true;
        }catch(Exception ex){
            Common.Log.exception("Link selection error...", ex);
        }
    }//GEN-LAST:event_btnSetNextPixelActionPerformed

    private void btnSetLyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetLyActionPerformed
        try{
            LineLibRecord line = spectralRawDataPreViewPanel1.getSelectedLine();
            if(line == null)
                return;
            spLy.setValue(line.Ly);
        }catch(Exception ex){
            Common.Log.exception("New button exception...", ex);
        }
    }//GEN-LAST:event_btnSetLyActionPerformed

    private void spLyStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spLyStateChanged
        try{
            
        }catch(Exception ex){
            Common.Log.exception("Ly state changed...", ex);
        }
    }//GEN-LAST:event_spLyStateChanged

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        try{
            Mask.storeNew((float)spLy.getValue());
            Mask = null;
            updateValues();
            updateList();
            //spLy.setValue(0.0F);
            Modefied = false;
        }catch(Exception ex){
            Common.Log.exception("New button exception...", ex);
        }
    }//GEN-LAST:event_btnNewActionPerformed

    public void updateList() throws IOException{
        linkList.update();
        spectralRawDataPreViewPanel1.clearMark();
        for(int i = 0;i<linkList.getCount();i++){
            File fl = linkList.getSubFolder(i);
            String name = fl.getName();
            Mask = new SpectralMask(getFile(null));
            Mask.restore(getFile(name));
            spectralRawDataPreViewPanel1.addMark(Mask.getLy(), name,Mask.Enabled);
        }
        spectralRawDataPreViewPanel1.updateView();
    }
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        try{
            Mask.store((float)spLy.getValue());
            Modefied = false;
        }catch(Exception ex){
            Common.Log.exception("New button exception...", ex);
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    final static String DISPERS_NAME = "dispers.bin";
    SpectralRawDispers getDispers() throws IOException{
        File fl = getFile(DISPERS_NAME);
        SpectralRawDispers ret;
        if(fl.exists() == false){
            ret = new SpectralRawDispers(Common.Setup.getDevice().getSensorSizes());
            ret.store(fl);
        } else {
            ret = new SpectralRawDispers();
            ret.restore(fl);
        }
        return ret;
    }
    
    private void mLinkApplyCurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLinkApplyCurActionPerformed
        try{
            File fl = getFile(DISPERS_NAME);
            if(fl.exists())
                fl.delete();
            SpectralRawDispers disp = getDispers();
            ArrayList<SpectralMask> masks = new ArrayList<>();
            File dir = getFile(null);
            File[] list = dir.listFiles((File pathname) -> pathname.getName().endsWith(MASK_EXT));
            for(int i = 0;i<list.length;i++){
                Mask = new SpectralMask(getFile(null));
                Mask.restore(list[i]);
                masks.add(Mask);
            }
            disp = LyLinker.link(spectralRawDataPreViewPanel1.getView(0), masks, disp);
            spectralRawDataPreViewPanel1.setDispers(disp);
            disp.store(fl);
            spectralRawDataPreViewPanel1.showAll();
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_mLinkApplyCurActionPerformed

    private void mLinkApplyDefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLinkApplyDefActionPerformed
        try{
            File fl = getFile(DISPERS_NAME);
            if(fl.exists())
                fl.delete();
            SpectralRawDispers disp = getDispers();
            spectralRawDataPreViewPanel1.setDispers(disp);
            disp.store(fl);
            spectralRawDataPreViewPanel1.showAll();
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_mLinkApplyDefActionPerformed

    private void mLinkUseSpectrAsLinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mLinkUseSpectrAsLinkActionPerformed
        try{
            
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_mLinkUseSpectrAsLinkActionPerformed

    private void mSpDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSpDeleteActionPerformed
        try{
            File fl = getFile((String)lSpectrList.getSelectedValue());
            SpectralMeasuring spm = new SpectralMeasuring(fl.getAbsolutePath());
            spm.delete();
            spList.update();
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_mSpDeleteActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        try{
            if(Mask == null)
                return;
            Mask.delete();
            updateList();
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnViewMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewMaskActionPerformed
        try{
            SpectralMask.SpectralMaskView view = Mask.getMaskView();
            DlgPanelOk.show(this,Common.Mls.get("Mask preview."),view);
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_btnViewMaskActionPerformed

    private void chbEnabledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chbEnabledActionPerformed
        try{
            Mask.Enabled = chbEnabled.isSelected();
        }catch(Exception ex){
            Common.Log.exception("", ex);
        }
    }//GEN-LAST:event_chbEnabledActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSetLy;
    private javax.swing.JButton btnSetNextPixel;
    private javax.swing.JButton btnSetPixel;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton btnViewMask;
    private javax.swing.JCheckBox chbEnabled;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList lLinks;
    private javax.swing.JList lSpectrList;
    private javax.swing.JLabel lbPixel;
    private javax.swing.JMenu mLink;
    private javax.swing.JMenuItem mLinkApplyCur;
    private javax.swing.JMenuItem mLinkApplyDef;
    private javax.swing.JMenuItem mLinkUseSpectrAsLink;
    private javax.swing.JMenuItem mSpDelete;
    private javax.swing.JMenuItem mSpMeasuring;
    private javax.swing.JMenuItem mSpRename;
    private javax.swing.JSpinner spLy;
    private org.tl.ops.dev.data.SpectralRawDataPreViewPanel spectralRawDataPreViewPanel1;
    // End of variables declaration//GEN-END:variables
}
