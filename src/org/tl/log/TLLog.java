/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tl.log;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.tl.ops.Common;

/**
 *
 * @author root
 */
public class TLLog{
    final static int MSG_LENGTH = 256;
    Connection connection;
    String workingDir;
    PreparedStatement statementMsg;
    public TLLog(String file) throws SQLException{
        File dir = new File(Common.DBDir+"Log"+File.separator+file);
        workingDir = dir.getAbsolutePath() + File.separator;
        String fname = workingDir + "log";
        if(dir.exists() == false){
            dir.mkdirs();
            connection = DriverManager.getConnection("jdbc:hsqldb:file:"+fname, "SA", "");
            Statement versionCheck = connection.createStatement();
            versionCheck.execute("CREATE TABLE t_version (version INTEGER)");
            versionCheck.execute("INSERT INTO t_version (version) VALUES (1)");
            
            versionCheck.execute("CREATE CACHED TABLE t_records (id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
                    "time TIMESTAMP NOT NULL,"+
                    "type CHAR NOT NULL," +
                    "msg VARCHAR("+MSG_LENGTH+")"+
                    ")");
            
            connection.commit();
        } else {
            connection = DriverManager.getConnection("jdbc:hsqldb:file:"+fname, "SA", "");
            Statement versionCheck = connection.createStatement();
            ResultSet rs = versionCheck.executeQuery("SELECT version FROM t_version");
            if(rs.next() && rs.getInt(1) != 1){
                throw new SQLException("Unknonw version");
            }
        }
        statementMsg = connection.prepareStatement("INSERT INTO t_records (time,type,msg) VALUES (?,?,?)",
                Statement.RETURN_GENERATED_KEYS);
    }
    
    String formatMsg(String msg){
        if(msg.length() > MSG_LENGTH)
            return msg.substring(0,MSG_LENGTH);
        return msg;
    }
    
    public int msg(String msg){
        try {
            
            statementMsg.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            statementMsg.setString(2,"m");
            statementMsg.setString(3, formatMsg(msg));
            if(statementMsg.executeUpdate()== 1){
                ResultSet generatedKeys = statementMsg.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int key = generatedKeys.getInt(1);
                    connection.commit();
                    return key;
                }
            }
        } catch (SQLException ex1) {
            Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return -1;
    }
    
    public int error(String msg){
        try {
            statementMsg.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            statementMsg.setString(2,"e");
            statementMsg.setString(3, formatMsg(msg));
            if(statementMsg.executeUpdate()== 1){
                ResultSet generatedKeys = statementMsg.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int key = generatedKeys.getInt(1);
                    connection.commit();
                    return key;
                }
            }
            System.err.println(msg);
        } catch (SQLException ex1) {
            Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return -1;
    }
    
    String getDataFileName(int key){
        String folder = workingDir+(key&0xFF)+File.separator;
        File fl = new File(folder);
        if(fl.exists() == false)
            fl.mkdir();
        return folder+key;
    }
    
    public int data(String msg,byte[] data){
        try {
            statementMsg.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            statementMsg.setString(2,"D");
            statementMsg.setString(3, formatMsg(msg));
            if(statementMsg.executeUpdate()== 1){
                ResultSet generatedKeys = statementMsg.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int key = generatedKeys.getInt(1);
                    String fileName = getDataFileName(key);
                    File fl = new File(fileName);
                    if(fl.createNewFile() == false)
                        throw new java.io.IOException("Can't create file "+fileName);
                    try {
                        try (FileOutputStream fos = new FileOutputStream(fl)) {
                            fos.write(data);
                            fos.flush();
                        }
                        connection.commit();
                    } catch (Exception ex1) {
                        Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
                        connection.rollback();
                        fl.delete();
                        return -1;
                    }
                    return key;
                }
            }
        } catch (SQLException ex1) {
            Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
        } catch (IOException ex1) {
            Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return -1;
    }
    
    public int exception(String msg,Exception ex){
        try {
            System.err.println(ex.getMessage());
            ex.printStackTrace();
            statementMsg.setTimestamp(1, new java.sql.Timestamp(System.currentTimeMillis()));
            statementMsg.setString(2,"X");
            statementMsg.setString(3, formatMsg(msg));
            if(statementMsg.executeUpdate()== 1){
                ResultSet generatedKeys = statementMsg.getGeneratedKeys();
                if (generatedKeys.next()) {
                    int key = generatedKeys.getInt(1);
                    String fileName = getDataFileName(key);
                    File fl = new File(fileName);
                    if(fl.createNewFile() == false)
                        throw new java.io.IOException("Can't create file "+fileName);
                    try {
                        try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(
                                new FileOutputStream(fl), "UTF-8"))) {
                            bw.write(msg);
                            bw.write("\n");
                            String m = ex.toString();
                            bw.write(m);
                            bw.write("\n");
                            StackTraceElement[] sts = ex.getStackTrace();
                            for(StackTraceElement st : sts){
                                bw.write(st.toString());
                                bw.write("\n");
                            }
                            bw.flush();
                        }
                        connection.commit();
                    } catch (Exception ex1) {
                        Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
                        connection.rollback();
                        fl.delete();
                        return -1;
                    }
                    return key;
                }
            }
        } catch (SQLException ex1) {
            Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
        } catch (IOException ex1) {
            Logger.getLogger(TLLog.class.getName()).log(Level.SEVERE, null, ex1);
        }
        return -1;
    }
    
    public void close() throws SQLException{
        connection.createStatement().execute("SHUTDOWN");
    }
}
