/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.tl.ops.db;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dialog;
import java.awt.Graphics;
import java.util.ArrayList;
import javax.swing.JPanel;
import org.tl.math.MathTools;
import org.tl.ops.Common;

/**
 *
 * @author root
 */
public class LineDbFilterDialog extends javax.swing.JDialog {
    ListPanel RPanel;
    /**
     * Creates new form LineDbFilterDialog
     */
    public LineDbFilterDialog(java.awt.Window parent, boolean modal) {
        super(parent, Dialog.ModalityType.APPLICATION_MODAL);
        initComponents();
        lbError.setText("");
        RPanel = new ListPanel();
        jPanel1.add(RPanel,BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbError = new javax.swing.JLabel();
        sbList = new javax.swing.JScrollBar();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        spLyFrom = new javax.swing.JSpinner();
        spLyTo = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        spIonFrom = new javax.swing.JSpinner();
        spIonTo = new javax.swing.JSpinner();
        cbxSrcType = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        taElementFilter = new javax.swing.JTextArea();
        btnShow = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new java.awt.BorderLayout());

        lbError.setForeground(new java.awt.Color(255, 0, 0));
        lbError.setText("jLabel4");

        sbList.addAdjustmentListener(new java.awt.event.AdjustmentListener() {
            public void adjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {
                sbListAdjustmentValueChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sbList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(lbError, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sbList, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbError))
        );

        jLabel1.setText("Line Db Filter");

        jLabel2.setText("Ly");

        spLyFrom.setModel(new javax.swing.SpinnerNumberModel(1600.0d, 1600.0d, 10000.0d, 1.0d));

        spLyTo.setModel(new javax.swing.SpinnerNumberModel(10000.0d, 1600.0d, 10000.0d, 1.0d));

        jLabel3.setText("Ion Level");

        spIonFrom.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5, 1));

        spIonTo.setModel(new javax.swing.SpinnerNumberModel(3, 0, 5, 1));

        cbxSrcType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "NIST", "Zaidel Iskra", "Zaidel Duga" }));

        taElementFilter.setColumns(20);
        taElementFilter.setRows(5);
        taElementFilter.setText("Al>10\nFe>5");
        jScrollPane1.setViewportView(taElementFilter);

        btnShow.setText("Найти");
        btnShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowActionPerformed(evt);
            }
        });

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("-");

        btnClear.setText("Скрыть");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbxSrcType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spIonFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spIonTo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spLyFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spLyTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 37, Short.MAX_VALUE))
            .addComponent(btnShow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spLyFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spLyTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spIonFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spIonTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxSrcType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnShow)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClear))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public class ListPanel extends JPanel{
        @Override
        public void paint(Graphics g){
            try{
                int h = getHeight();
                int w = getWidth();
                g.setColor(Color.white);
                g.fillRect(0, 0, w, h);
                int step = 15;
                int y = step;
                g.setColor(Color.BLACK);
                int n = sbList.getValue();
                while(y < h && n < Results.size()){
                    LineLibRecord rec = Results.get(n);
                    String txt = ""+(n+1)+" "+
                            ElementTable.Elements[rec.Element].Name+" "+
                            rec.IonLevel+" "+
                            MathTools.getGoodValue(rec.Ly,1)+" "+
                            rec.Value+" "+
                            rec.getElementName()+" ";
                    g.drawString(txt, 5, y);
                    y += step;
                    n ++;
                }
            }catch(Exception ex){
                Common.Log.exception("Draw results...", ex);
            }
        }
    }
    
    abstract class Filter{
        public static final int NOT_FOUND = -10000;
        public abstract int isOk(LineLibRecord record);
    }
    
    class NISTFilter extends Filter{
        int from,to,element;
        public NISTFilter(int element,int from,int to){
            this.element = element;
            this.from = from;
            this.to = to;
        }
        
        @Override
        public int isOk(LineLibRecord record) {
            if(element > 0){ 
                if(record.Element == element && record.NistIntens >= from && record.NistIntens <= to)
                    return record.NistIntens;
                return NOT_FOUND;
            }
            if(record.NistIntens >= from && record.NistIntens <= to)
                return record.NistIntens;
            return NOT_FOUND;
        }
    }
    
    class IZaidelFilter extends Filter{
        int from,to,element;
        public IZaidelFilter(int element,int from,int to){
            this.element = element;
            this.from = from;
            this.to = to;
        }
        
        @Override
        public int isOk(LineLibRecord record) {
            if(element > 0){ 
                if(record.Element == element && record.ZIntensIskra >= from && record.ZIntensIskra <= to)
                    return record.ZIntensIskra;
                return NOT_FOUND;
            }
            if(record.ZIntensIskra >= from && record.ZIntensIskra <= to)
                return record.ZIntensIskra;
            return NOT_FOUND;
        }
    }
    
    class DZaidelFilter extends Filter{
        int from,to,element;
        public DZaidelFilter(int element,int from,int to){
            this.element = element;
            this.from = from;
            this.to = to;
        }
        
        @Override
        public int isOk(LineLibRecord record) {
            if(element > 0){ 
                if(record.Element == element && record.ZIntensDuga >= from && record.ZIntensDuga <= to)
                    return record.ZIntensDuga;
                return NOT_FOUND;
            }
            if(record.ZIntensDuga >= from && record.ZIntensDuga <= to)
                return record.ZIntensDuga;
            return NOT_FOUND;
        }
    }
    
    String errorMsg = "";
    String[] splitLine(String line) throws Exception{
        String[] ret = new String[3];
        int index = line.indexOf('>');
        if(index > 0){
            ret[1] = ">";
        } else {
            index = line.indexOf('<');
            if(index > 0){
                ret[1] = "<";
            } else {
                errorMsg = Common.Mls.get("Can't find symbol < or >");
                throw new Exception("Can't find symbol < or >");
            }
        }
        errorMsg = Common.Mls.get("Error extracting element name from ")+line;
        ret[0] = line.substring(0,index).trim().toLowerCase();
        errorMsg = Common.Mls.get("Error extracting value from ")+line;
        ret[2] = line.substring(index+1).trim();
        errorMsg = "";
        return ret;
    }
    
    public ArrayList<LineLibRecord> Results = new ArrayList<>();
    private void btnShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowActionPerformed
        try{
            Results.clear();
            
            String text = taElementFilter.getText();
            String[] filterLines = text.split("\n");
            ArrayList<Filter> filters = new ArrayList<>();
            //ArrayList<Filter> filterAlls = new ArrayList<>();
            for(int i = 0;i<filterLines.length;i++){
                String fl = filterLines[i].trim();
                if(fl == null || fl.length() == 0)
                    continue;
                String[] conf = splitLine(fl);
                int from,to;
                if(conf[1].equals("<")){
                    from = -1;
                    to = Integer.parseInt(conf[2]);
                } else {
                    from = Integer.parseInt(conf[2]);
                    to = 1000000;
                }
                int element;
                ArrayList<Filter> cur;
                /*if(conf[0].equals("all")){
                    element = -1;
                    cur = filterAlls;
                } else {*/
                    cur = filters;
                    element = ElementTable.FindIndex(conf[0]);
                    if(element == -1){
                        errorMsg = Common.Mls.get("Unknown element ",conf[0]);
                        throw new Exception(errorMsg);
                    }
                //}
                switch(cbxSrcType.getSelectedIndex()){
                    case 0: cur.add(new NISTFilter(element, from, to)); break;
                    case 1: cur.add(new IZaidelFilter(element, from, to)); break;
                    case 2: cur.add(new DZaidelFilter(element, from, to)); break;
                    default:
                        errorMsg = Common.Mls.get("Unknown element ",conf[0]);
                        throw new Exception(errorMsg);
                }
            }
            double lyFrom = (Double)spLyFrom.getValue(),
                    lyTo = (Double)spLyTo.getValue();
            int ionFrom = (Integer)spIonFrom.getValue(),
                    ionTo = (Integer)spIonTo.getValue();
            
            for(int i = 0;i<Common.LineDb.DataSet.size();i++){
                LineLibRecord rec = Common.LineDb.DataSet.get(i);
                if(rec.Ly < lyFrom && lyTo < rec.Ly &&
                        rec.IonLevel < ionFrom && ionTo < rec.IonLevel)
                    continue;
                //boolean flag = false;
                double value = Filter.NOT_FOUND;
                for(Filter f : filters){
                    value = f.isOk(rec);
                    if(value != Filter.NOT_FOUND){
                        //flag = true;
                        break;
                    }
                }
                /*for(Filter f : filterAlls){
                    if(f.isOk(rec) == false){
                        flag = false;
                        break;
                    }
                }*/
                if(value != Filter.NOT_FOUND)
                    Results.add(new LineLibRecord(rec,(short)value));
            }
            if(Results.size() > 0){
                sbList.setValues(0, 1, 0, Results.size());
                sbList.setEnabled(true);
            } else 
                sbList.setEnabled(false);
            
            RPanel.invalidate();
            RPanel.repaint();
        }catch(Exception ex){
            Common.Log.exception("Can' show line list.", ex);
        }
        lbError.setText(errorMsg);
    }//GEN-LAST:event_btnShowActionPerformed

    private void sbListAdjustmentValueChanged(java.awt.event.AdjustmentEvent evt) {//GEN-FIRST:event_sbListAdjustmentValueChanged
        try{
            RPanel.invalidate();
            RPanel.repaint();
        }catch(Exception ex){
            Common.Log.exception("Can' show line list.", ex);
        }
    }//GEN-LAST:event_sbListAdjustmentValueChanged

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        try{
            Results.clear();
            RPanel.invalidate();
            RPanel.repaint();
        }catch(Exception ex){
            Common.Log.exception("Can' show line list.", ex);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnShow;
    private javax.swing.JComboBox cbxSrcType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbError;
    private javax.swing.JScrollBar sbList;
    private javax.swing.JSpinner spIonFrom;
    private javax.swing.JSpinner spIonTo;
    private javax.swing.JSpinner spLyFrom;
    private javax.swing.JSpinner spLyTo;
    private javax.swing.JTextArea taElementFilter;
    // End of variables declaration//GEN-END:variables
}
